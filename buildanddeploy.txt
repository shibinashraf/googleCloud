

tar -xvzf [ file_name ].tar.gz





docker build -t gcr.io/[ id-project ]/echo-app:v1 .  



docker run -d -p 8080:8000 gcr.io/[id-project]/echo-app:v1
docker push gcr.io/[id-project]/echo-app:v1







gsutil cp gs://$DEVSHELL_PROJECT_ID/echo-web.tar.gz .

tar -xvzf echo-web.tar.gz
gcloud builds submit --tag gcr.io/$DEVSHELL_PROJECT_ID/echo-app:v1 .
gcloud container clusters create echo-cluster \
                --num-nodes 2 \
                --machine-type n1-standard-2 \
                --zone us-central1-a



gsutil cp -r gs://{Project_Id} .
cd {Project_Id}
tar -xvzf echo-web-v2.tar.gz
docker build -t gcr.io/{Project_Id}/echo-app:v2 .
docker push gcr.io/{Project_Id}/echo-app:v2
gcloud container clusters get-credentials echo-cluster --zone=us-central1-a
kubectl create deployment echo-web --image=gcr.io/qwiklabs-gcp-00-4a792fa4c3cf/echo-app:v2
kubectl scale deployment echo-web --replicas=2
kubectl expose deployment echo-web --type=LoadBalancer --port 80 --target-port 8000
kubectl get services





gcloud container clusters create echo-cluster \
                --num-nodes 2 \
                --machine-type n1-standard-2 \
                --zone us-central1-a





kubectl run  echo-web \
    --image=gcr.io/[id-project]/echo-app:v1 \
    --port=8000

kubectl expose deployment echo-web --type="LoadBalancer" --port=80 --target-port=8000